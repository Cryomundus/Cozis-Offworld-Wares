//==================================================
// Bulk and Multiple Pouches
//==================================================
extend class UaS_AmmoPouch {
	override double WeaponBulk() {
		int calcamount = min(max(weaponstatus[APS_AMOUNT], 1), 5);
		double reductionfactor = 0.45 + min(0.05 * calcamount, 0.5);
		double basebulk = 20 * max(weaponstatus[APS_AMOUNT], 1);
		return max((Storage ? Storage.TotalBulk * reductionfactor : 0), basebulk);
	}

	override void UpdateCapacity() {
		MaxCapacity = default.MaxCapacity / max(hd_encumbrance, 0.01);
		Storage.MaxBulk = MaxCapacity * max(weaponstatus[APS_AMOUNT], 1);
	}

	override void actualpickup(actor other,bool silent) {
		UaS_AmmoPouch HeldPouch=UaS_AmmoPouch(other.findinventory("UaS_AmmoPouch"));
		if (HeldPouch) {
			HeldPouch.weaponstatus[APS_AMOUNT]++;
			HeldPouch.UpdateCapacity();
			for (int i = 0; i < Storage.Items.Size(); i++) {
				StorageItem MoveItem = Storage.Items[i];
				int AmountToMove = MoveItem.Amounts.Size() > 0 ? MoveItem.Amounts[0] : 0;
				HeldPouch.Storage.AddAmount(MoveItem.ItemClass, AmountToMove);
			}
			self.destroy();
			return;
		}
		super.actualpickup(other, silent);
	}

	override inventory CreateTossable(int amt) {
		bool DoSplit = (weaponstatus[APS_AMOUNT] > 1);
		amount = weaponstatus[APS_AMOUNT]; // Hack to satisfy CreateTossable expectations
		UaS_AmmoPouch DroppedPouch = UaS_AmmoPouch(super.CreateTossable(amt));
		DroppedPouch.weaponstatus[APS_AMOUNT] = 1;
		DroppedPouch.UpdateCapacity();
		if (DoSplit) {
			weaponstatus[APS_AMOUNT]--;
			StorageItem SelItem = Storage.GetSelectedItem();
			if (!SelItem || Storage.Items.Size() <= 0) { return DroppedPouch;}
			int AmountInPouch = SelItem.Amounts.Size() > 0 ? SelItem.Amounts[0] : 0;
			double UnitBulk = HDPickup(getdefaultbytype(SelItem.ItemClass)).bulk * hdmath.getencumbrancemult();
			UnitBulk = max(UnitBulk, 0.01);
			int AmountToMove = int((DroppedPouch.Storage.MaxBulk - DroppedPouch.Storage.TotalBulk) / UnitBulk);
			AmountToMove = min(AmountToMove, AmountInPouch);
			DroppedPouch.Storage.AddAmount(SelItem.ItemClass, AmountToMove);
			Storage.RemoveItem(SelItem, null, null, AmountToMove);
		}
		return DroppedPouch;
	}
}
