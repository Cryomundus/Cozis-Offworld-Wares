// ------------------------------------------------------------
// Trite Barrel
// ------------------------------------------------------------
class TriteBarrel:HDBarrel{
	int musthavegremlin;
	int spawnedtrites; 
	property musthavegremlin:musthavegremlin;
	class<actor> lighttype;
	property lighttype:lighttype;
	default{
		//$Category "Monsters/Hideous Destructor"
		//$Title "Spider Barrel"
		//$Sprite "BAR1A0"
/*
		+solid +shootable
		+activatemcross +canpass +nodropoff
		+fixmapthingpos +dontgib
		+hdmobbase.doesntbleed
		+hdmobbase.headless
		-countkill
		-ismonster
		+hdmobbase.noshootablecorpse
		maxstepheight 4;
		maxdropoffheight 4;
		damagefactor "hot",1.2;
		damagefactor "cold",1.2;
		damagefactor "Balefire",0.1;
		radius 11;height 34;
		health 100;mass 200;gibhealth 200;
		painchance 256;
		pushfactor 0.1;
		deathsound "world/barrelx";
		translation "176:191=96:111","64:79=104:111";

		bloodcolor "ba ff 86";bloodtype "NotQuiteBloodSplat";
		obituary "%o was rolled by a barrel.";
		attacksound "barrel/missile";*/

		//hdbarrel.musthavegremlin 1; //0 random, -1 never, 1 always
		hdbarrel.lighttype "HDBarrelLight";
		tag "barrel";
}
	override void postbeginplay(){
		if(
				!sv_nomonsters
				&&(random(0,99)<hd_killerbarrels)
			)
		{
			painsound="barrel/pain";
			A_SpawnItemEx("BarrelGremlin",flags:SXF_NOCHECKPOSITION|SXF_SETMASTER);
		}
	}
	void A_BarrelMove(){
		if(floorz!=pos.z)return;
		A_FaceTarget();
		angle+=random(-135,135);
		A_StartSound("barrel/walk",CHAN_BODY);
		vel.xy+=(cos(angle),sin(angle))*0.1;
		setstatelabel("inertjiggle");
	}
	void A_TriteSpawn(){
		//A_FaceTarget(0,0);
			//A_StartSound(attacksound,CHAN_WEAPON);
			if(spawnedtrites<5&&CheckIfTargetInLOS(360, 256)){A_SpawnItemEx("Trite",frandom(0,8),frandom(0,8),frandom(0,8),frandom(0,8),frandom(0,8),frandom(0,8),frandom(0,180),SXF_NOCHECKPOSITION);spawnedtrites++;}
		setstatelabel("spawn");
	}
	void A_BarrelCheckCrowd(){
		int bcc=0;
		barrelexplodemarker bpm;
		thinkeriterator bexpm=ThinkerIterator.create("BarrelExplodeMarker");
		while(bpm=barrelexplodemarker(bexpm.next(true))){
			bcc++;
			if(bcc>random(1,12)){
				setstatelabel("waittoexplode");
				break;
			}
		}
	}
	states{
	spawn:
        BAR1 AB 10;
		#### A 0 A_TriteSpawn;
		loop;
	pain:
		BAR1 B 1 A_Pain();
	inertjiggle:
		#### B 1 A_StartSound("barrel/jiggle",CHAN_BODY,CHANF_OVERLAP);
		#### ABABAABBAAABBB 1;
		---- A 0 A_Jump(256,"spawn");
	death:
		#### A 0;
		---- A 0 A_NoBlocking();
		---- A 0 A_SetSize(-1,default.height);
	waittoexplode:
		---- A 0 A_SetSolid();
		---- A 0 A_SetShootable();
		#### ABABAB random(1,3);
		#### B random(1,3) A_BarrelCheckCrowd();
	reallyexplode:
		BEXP C 0{
			A_UnsetSolid();
			A_UnsetShootable();
			A_NoBlocking();
			A_SetSize(-1,deathheight);
			bsolid=false;
			new("BarrelExplodeMarker");

			//set counter for spawning chunks in a crowd
			stamina=0;
			blockthingsiterator a=blockthingsiterator.create(self,320);
			while(a.next()){
				if(
					a.thing is "BarrelExplodeMarker"
				){
					stamina++;
				}
			}

			actor xpl=spawn("HDExplosionLight",pos,ALLOW_REPLACE);
			xpl.target=self;xpl.stamina=256;
		}
		BEXP CCC 1 bright{
			if(stamina<3){
				for(int i=0;i<16;i++){
					actor aaa=spawn("HugeWallChunk",(pos.xy,pos.z+frandom(0,height)),ALLOW_REPLACE);
					aaa.vel=(frandom(-10,10),frandom(-10,10),frandom(4,20));
					if(aaa.vel dot aaa.vel < 100)
						aaa.A_SetTranslation((KillerFireCan(self)||random(0,2))?"Charred":"Booger");
					aaa.scale*=frandom(0.8,1.8);
				}
			}
			actor a=spawn("HDExplosion",self.pos+(random(-2,2),random(-2,2),random(12,32)),ALLOW_REPLACE);
			a.vel=self.vel+(random(-1,1),random(-1,1),random(-1,2));
			A_SpawnItemEx("Trite",frandom(0,8),frandom(0,8),0,frandom(0,8),frandom(0,8),0,frandom(0,180),SXF_NOCHECKPOSITION);
			A_SpawnItemEx("Trite",frandom(0,8),frandom(0,8),0,frandom(0,8),frandom(0,8),0,frandom(0,180),SXF_NOCHECKPOSITION);
		}
		BEXP C 0 A_BarrelBlast();
		BEXP D 2 bright{
			if(painsound!="barrel/pain")
			A_SpawnChunks("HDSmokeChunk",random(2,5),7,16);
			A_Scream();
			DistantQuaker.Quake(self,6,42,512,10);
			A_StartSound("world/explode");
			DistantNoise.Make(self,"world/rocketfar");
		}
		BEXP EEEEEEE 0 A_SpawnItemEx ("HDSmoke", random(-6,6),random(-6,6),random(12,32), vel.x+random(-1,1),vel.y+random(-1,1),vel.z+random(1,2), 0,168);
		BEXP EEE 2 bright A_FadeOut(0.3);
		POB1 A 0{
			A_SetSize(-1,8);
			A_SetScale(0.7);
			A_SetRenderstyle(1,Style_Normal);
			setstatelabel("dying");
			A_GiveInventory("Heat",6660);
			bshootable=true;
			bpushable=false;
			bbright=false;
		}
	dying:
		POB1 AAAAAAA 50{
			A_Immolate(self,self.target,random(12,24));
			if(!random(0,2)) A_SpawnChunks("HDSmokeChunk",1,2,12);
		}
		POB1 A -1{
			A_StartSound("vile/firestrt",CHAN_AUTO,volume:0.4);
			A_SpawnChunks("HDSmoke",8,0,3);
		}stop;
	}
	override void A_BarrelBlast(){
		A_HDBlast(
			random(128,256),random(128,256),0,"Balefire",
			256,256,0,true,
			fragradius:512,fragtype:"HDB_scrap",
			immolateradius:128,immolateamount:random(10,40),immolatechance:36
		);
		A_BarrelFrags();
	}
	void A_BarrelFrags(){
		for(int i=0;i<100;i++){
			let aaa=spawn("HDB_scrap",(pos.xy,pos.z+frandom(0,height)));
			aaa.target=self;
			aaa.vel=(angletovector(frandom(0,360),frandom(80,600)),frandom(-20,100));
			aaa.speed=vel.length();
		}
	}
}